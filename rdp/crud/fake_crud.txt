def add_or_update_device(
        self, 
        device_id: int = None, 
        device_name: str = None 
    ) -> None:
        """_summary_

        Args:
            device_id (int, optional): _description_. Defaults to None.
            device_name (str, optional): _description_. Defaults to None.
        """

        with Session(self._engine) as session:
            stmt = select(Device).where(Device.id == device_id)
            db_type = None
            for type in session.scalars(stmt):
                db_type = type
            if db_type is None:
                db_type = Device(id=device_id)
            if device_name:
                db_type.device_name = device_name
            elif not db_type.device_name:
                db_type.device_name = "NONAME_%d" % device_id
            session.add_all([db_type])
            session.commit()
            # return db_type

    def get_device(self, device_id:int = None, type_id:int = None) -> List[Device]:
        """_summary_

        Args:
            device_id (int, optional): _description_. Defaults to None.
            type_id (int, optional): _description_. Defaults to None.

        Returns:
            List[Device]: _description_
        """

        with Session(self._engine) as session:
            if device_id is not None:
                stmt = select(Device).where(Device.id == device_id)
            return session.scalars(stmt).one()

    def get_valued_by_device(self, device_id:int = None, type_id:int = None) -> List[Value]:
        """_summary_

        Args:
            device_id (int, optional): _description_. Defaults to None.
            type_id (int, optional): _description_. Defaults to None.

        Returns:
            List[Value]: _description_
        """

        with Session(self._engine) as session:
            if device_id is not None:
                stmt = select(Value).where((and_(Device.id == device_id),
                                                 (Value.type_id == type_id)))
            return session.scalars(stmt).one()

    def put_value_by_device(self, device_id:int = None) -> None:
        
        with Session(self.engine) as session:
            stmt = select()

        pass

